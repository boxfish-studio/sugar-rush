/* eslint-disable react-hooks/exhaustive-deps */
import { useWallet } from '@solana/wallet-adapter-react'
import { CandyMachineList } from 'components'
import { useRPC } from 'hooks'
import { CANDY_MACHINE_PROGRAM_V2_ID } from 'lib/candy-machine/constants'
import { candyMachinesState } from 'lib/recoil-store/atoms'
import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import { useEffect, useState } from 'react'
import { useRecoilState } from 'recoil'
import { Button, Spinner } from '@primer/react'

const ManageCandyMachines: NextPage = () => {
    const { publicKey } = useWallet()
    const [accounts, setAccounts] = useRecoilState(candyMachinesState)
    const [isLoading, setIsLoading] = useState(false)
    const [error, setError] = useState(false)
    const { rpcEndpoint } = useRPC()

    const fetchAccounts = async () => {
        try {
            const accounts = await rpcEndpoint.getProgramAccounts(CANDY_MACHINE_PROGRAM_V2_ID, {
                commitment: 'confirmed',
                filters: [
                    {
                        memcmp: {
                            offset: 8,
                            bytes: publicKey!.toBase58(),
                        },
                    },
                ],
            })

            if (accounts.length === 0) return setAccounts([])

            const accountsPubkeys = accounts.map((account) => account.pubkey.toBase58()).sort()
            setAccounts(accountsPubkeys)
            setError(false)
        } catch (err) {
            console.error(err)
        }
    }

    useEffect(() => {
        setError(false)
        setIsLoading(true)

        fetchAccounts()
            .catch(() => setError(true))
            .finally(() => {
                setIsLoading(false)
            })
    }, [])
    return isLoading ? (
        <div className='d-flex width-full height-full flex-justify-center flex-items-center'>
            <Spinner />
        </div>
    ) : (
        <>
            <Head>
                <title>Candy Machines</title>
                <meta name='description' content='Generated by create next app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <div className='d-flex flex-column'>
                <div className='d-flex my-5 flex-items-center'>
                    <h2>Candy Machines Â·</h2>
                    <h2 className='ml-2'>
                        {!error && accounts.length === 0 ? (
                            <Spinner size='small' sx={{ display: 'flex' }} />
                        ) : (
                            accounts?.length
                        )}
                    </h2>
                </div>
                {error && !isLoading && (
                    <div className='d-flex flex-column flex-items-center flex-justify-center mt-11'>
                        Error fetching accounts
                        <Button variant='danger' className='mt-4' onClick={fetchAccounts}>
                            Fetch again
                        </Button>
                    </div>
                )}

                {!isLoading && !error && accounts.length > 0 && accounts[0] !== '' && (
                    <CandyMachineList candyMachineAccounts={accounts} />
                )}
                {!isLoading && !error && accounts[0] === '' && (
                    <span className='mt-5'>
                        You have no candy machine accounts.{' '}
                        <Link href='/create-candy-machine'>
                            <a>Create one?</a>
                        </Link>
                    </span>
                )}
            </div>
        </>
    )
}

export default ManageCandyMachines
