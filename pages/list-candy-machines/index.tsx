/* eslint-disable react-hooks/exhaustive-deps */
import type { NextPage } from 'next';
import Head from 'next/head';
import { useWallet } from '@solana/wallet-adapter-react';
import CandyMachineCard from 'components/FetchCM/CandyMachineCard';
import React, { useEffect, useState } from 'react';
import { useRPC } from 'hooks';
import { Spinner, Title } from 'components/Layout';
import { CANDY_MACHINE_PROGRAM_V2_ID } from 'lib/constants';

const ListCandyMachines: NextPage = () => {
  const { publicKey, connected } = useWallet()

  const [accounts, setAccounts] = useState<string[]>([])
  const [loading, setLoading] = useState({ loading: false, error: false })
  const { rpcEndpoint } = useRPC()

  async function fetchAccounts() {
    setLoading({ loading: true, error: false })
    try {
      if (publicKey) {
        const accounts = await rpcEndpoint.getProgramAccounts(
          CANDY_MACHINE_PROGRAM_V2_ID,
          {
            commitment: 'confirmed',
            filters: [
              {
                memcmp: {
                  offset: 8,
                  bytes: publicKey.toBase58(),
                },
              },
            ],
          }
        )
        const accountsPubkeys = accounts.map((account) =>
          account.pubkey.toBase58()
        )
        setAccounts(accountsPubkeys)
        setLoading({ loading: false, error: false })
      }
    } catch (err) {
      console.error(err)
      setLoading({ loading: false, error: true })
    }
  }

  useEffect(() => {
    fetchAccounts()
  }, [publicKey])

  if (!connected) {
    return (
      <div className='flex justify-center items-center flex-col'>
        <h1 className='text-red-600 text-xl flex flex-col items-center h-auto justify-center mt-8'>
          Connect your wallet to create a Candy Machine
        </h1>
      </div>
    )
  }

  return (
    <>
      <Head>
        <title>List Candy Machine</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='flex justify-center items-center flex-col'>
        <Title text='List Candy Machine' />
        {loading.loading && <Spinner />}
        {loading.error && (
          <div className='flex flex-col items-center justify-center mt-11'>
            Error fetching accounts
            <button
              className='rounded-lg bg-slate-400 p-2 mt-4'
              onClick={fetchAccounts}
            >
              Fetch again
            </button>
          </div>
        )}

        {accounts.length > 0 && !loading.error && (
          <CandyMachineCard accounts={accounts} />
        )}
      </div>
    </>
  )
}

export default ListCandyMachines
