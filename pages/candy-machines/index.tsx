/* eslint-disable react-hooks/exhaustive-deps */
import { useWallet } from '@solana/wallet-adapter-react'
import { CandyMachineList, CreateCandyMachine, Popup, SearchBar, RefreshButton } from 'components'
import { useNotification, useRPC } from 'hooks'
import { candyMachinesState, candyMachineSearchState } from 'lib/recoil-store/atoms'
import { fetchCandyMachineAccounts } from 'lib/utils'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { useRecoilState, useRecoilValue } from 'recoil'
import { Button, Spinner } from '@primer/react'
import { CandyMachineAction } from 'lib/enums'

const ManageCandyMachines: NextPage = () => {
    const { connection } = useRPC()
    const { publicKey } = useWallet()
    const { addCandyMachineNotificationError } = useNotification()

    const [accounts, setAccounts] = useRecoilState(candyMachinesState)
    const [isLoading, setIsLoading] = useState(false)
    const [isRefreshLoading, setIsRefreshLoading] = useState(false)
    const [isCreateOpen, setIsCreateOpen] = useState(false)
    const [searchValue, setSearchValue] = useRecoilState(candyMachineSearchState)
    const searchInput = useRecoilValue(candyMachineSearchState)

    const searchResults = accounts.filter((account) => {
        return account.toLowerCase().includes(searchInput.trim().toLowerCase())
    })

    const fetchAccounts = async () => {
        if (!connection) return
        setIsRefreshLoading(true)
        try {
            const accounts = await fetchCandyMachineAccounts(connection, publicKey!)
            setAccounts(accounts)
        } catch (err) {
            console.error(err)
            addCandyMachineNotificationError(CandyMachineAction.Fetch, (err as Error)?.message)
        }
        setIsRefreshLoading(false)
    }

    useEffect(() => {
        if (!connection) return
        setIsLoading(true)
        fetchAccounts()
            .catch((e: any) => addCandyMachineNotificationError(CandyMachineAction.Fetch, (e as Error)?.message))
            .finally(() => {
                setIsLoading(false)
            })
    }, [connection])

    if (isLoading) {
        return (
            <div className='d-flex width-full height-full flex-justify-center flex-items-center'>
                <Spinner />
            </div>
        )
    }

    return (
        <>
            <Head>
                <title>Candy Machines</title>
                <meta name='description' content='Generated by create next app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <div className='d-flex flex-justify-end column-gap-1 flex-row flex-md-row'>
                <SearchBar
                    searchValue={searchValue}
                    setSearchValue={setSearchValue}
                    placeholderText='Search candy machine'
                />
                <Button variant='primary' onClick={() => setIsCreateOpen(true)} sx={{ textTransform: 'capitalize' }}>
                    Create candy machine
                </Button>
                <RefreshButton onClick={fetchAccounts} isLoading={isRefreshLoading} />
            </div>
            <div className='d-flex flex-column'>
                <div className='d-flex my-5 flex-items-center'>
                    <h2>Candy Machines Â·</h2>
                    <h2 className='ml-2'>{accounts?.length}</h2>
                </div>
                {!accounts?.length ? (
                    <div className='mt-5 d-flex flex-column flex-md-row flex-items-start flex-md-items-center '>
                        <div className='mr-2'>You have no candy machine accounts.</div>
                        <Button
                            className='color-bg-transparent text-semibold'
                            variant='invisible'
                            onClick={() => setIsCreateOpen(true)}
                            sx={{ textTransform: 'capitalize', padding: '0' }}
                        >
                            Create one?
                        </Button>
                    </div>
                ) : (
                    <CandyMachineList candyMachineAccounts={searchResults} />
                )}
                {isCreateOpen && (
                    <Popup onClose={() => setIsCreateOpen(false)} title='Create Candy Machine' size='large'>
                        <CreateCandyMachine />
                    </Popup>
                )}
            </div>
        </>
    )
}

export default ManageCandyMachines
