import type { NextPage } from 'next'
import { useRouter } from 'next/router'
import { Title, CheckConnectedWallet, ActionButton } from 'components/Layout'
import Head from 'next/head'
import { useUploadCache, useVerifyCandyMachineV2, useMintCandyMachine } from 'hooks'
import { useWallet } from '@solana/wallet-adapter-react'
import { useEffect, useState } from 'react'

const VerifyCandyMachine: NextPage = () => {
  const router = useRouter()
  const account = router.query.id
  const { cache, uploadCache } = useUploadCache()
  const { connected } = useWallet()
  const { error, isLoading, verifyCandyMachine, message, connection, canMint } =
  useVerifyCandyMachineV2(cache)
  const { isUserMinting, itemsRemaining, nftPrice, isActive, mintAccount, refreshCandyMachineState } = useMintCandyMachine(account as string);


  useEffect(() => {
    refreshCandyMachineState();
  }, [canMint])

  return (
    <>
      <Head>
        <title>Verify Candy Machine</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      {connected ? (
        <div className='flex justify-center items-center flex-col'>
          <Title text='Verify Candy Machine' />
          <span className='mt-8'>
            {account}{' '}
            <a
              className='text-blue-700'
              href={`https://solscan.io/account/${account}${
                connection.rpcEndpoint.includes('devnet')
                  ? '?cluster=devnet'
                  : ''
              }`}
              target='_blank'
              rel='noopener noreferrer'
            >
              View in Solscan
            </a>
          </span>
          <div className='mt-7 flex flex-col justify-center items-center gap-3'>
            <label htmlFor='cache'>Cache file</label>

            <input type='file' name='cache' onChange={uploadCache} />
          </div>

          {isLoading && (
            <ActionButton text='Verifying Candy Machine...' isLoading />
          )}

          {!isLoading && (
            <ActionButton
              text='Verify Candy Machine'
              onClick={() => verifyCandyMachine({ account })}
            />
          )}
          {!error && message && (
            <div className='border border-cyan-500 mx-36 mt-10 p-5 rounded-xl text-black'>
              {message}
            </div>
          )}

          {!isLoading && error && (
            <div className='border border-red-500 mx-36 mt-10 p-5 rounded-xl'>
              {error}
            </div>
          )}

          {/* TODO: remove ! */}
          {!canMint && (
            <div className='border border-gray-500 mt-10 p-5 rounded-xl grid grid-cols-3 justify-items-center gap-5'>
              <span>Remaining: {itemsRemaining}</span>
              <span>Price: {nftPrice}</span>
              <span>Live: {isActive ? "Yes" : "No"}</span> 
              <span className='col-span-3'>
                <ActionButton text='Mint 1 token' isLoading={isUserMinting} onClick={() => mintAccount()} />
              </span>

            <span>{message}</span>
              
            </div>
          )}
          
        </div>
      ) : (
        <CheckConnectedWallet />
      )}
    </>
  )
}

export default VerifyCandyMachine
